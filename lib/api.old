import axios from "axios";
import type { Note, NoteTag } from "@/types/note.ts";

// const API_BASE_URL = "https://notehub-public.goit.study/api";
const API_BASE_URL = "http://localhost:3000";
const NOTES_ENDPOINT = "/notes";

const token = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
    Authorization: token ? `Bearer ${token}` : "",
  },
});

interface FetchNotesParams {
  page?: number;
  search?: string;
  perPage?: number;
  tag?: NoteTag;
}

type FetchNotesResponse = {
  notes: Note[];
  page: number;
  perPage: number;
  totalPages: number;
  totalNotes?: number;
};

export const fetchNotes = async ({
  page = 1,
  perPage = 12,
  search = "",
  tag,
}: FetchNotesParams): Promise<FetchNotesResponse> => {
  const params: Record<string, string | number> = { page, perPage };

  if (search) {
    params.search = search;
  }
  if (tag) {
    params.tag = tag;
  }
  console.log(params);

  const response = await axiosInstance.get<FetchNotesResponse>(NOTES_ENDPOINT, {
    params: params,
  });
  return response.data;
};

export const createNote = async (note: {
  title: string;
  content: string;
  tag: NoteTag;
}): Promise<Note> => {
  const response = await axiosInstance.post<Note>(NOTES_ENDPOINT, note);
  return response.data;
};

export const deleteNote = async (id: string): Promise<Note> => {
  const response = await axiosInstance.delete<Note>(`${NOTES_ENDPOINT}/${id}`);
  return response.data;
};

export const fetchNoteById = async (id: string): Promise<Note> => {
  const response = await axiosInstance.get<Note>(`${NOTES_ENDPOINT}/${id}`);

  if (response.status !== 200) {
    throw new Error(`Failed to fetch note with id ${id}`);
  }

  return response.data;
};
